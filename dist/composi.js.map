{"version":3,"file":"composi.js","sources":["../lib/patch.js","../lib/mixin.js","../lib/component.js","../lib/render.js","../lib/h.js"],"sourcesContent":["/**\n * A function to merge two objects together. The properties of the second object will overwrite any matching properties in the first object.\n * @param {Object} obj1 The first object to merge.\n * @param {Object} obj2 The second object to merge.\n */\nfunction mixin(obj1, obj2) {\n  const result = {}\n  for (let i in obj1) {\n    result[i] = obj1[i]\n  }\n  for (let i in obj2) {\n    result[i] = obj2[i]\n  }\n  return result\n}\n\n/**\n * @constructor \n * @param {node} oldNode Original node or null.\n * @param {node} node New node.\n * @param {node} element The component root element.\n * @param {node} container The container element in which component is rendered.\n */\nexport function patch(oldNode, node, element, container) {\n  return diffAndPatch(container || document.body, element, oldNode, node)\n}\n\n/**\n * Patch functions:\n * setProps \n * createNode\n * createElement\n * getKey\n * updateElement\n * removeElement\n * diffAndPatch\n */\n\n/**\n * Function to set properties and attributes on element.\n * @param {node} element \n * @param {string} name \n * @param {string|number|boolean} value \n * @param {string|number|boolean} oldValue \n */\nfunction setProps(element, name, value, oldValue) {\n  if (name === 'key') {\n  } else if (name === 'style') {\n    for (let name in mixin(oldValue, (value = value || {}))) {\n      element.style[name] = String(value[name]) || ''\n    }\n  } else {\n    try {\n      if (value === 0) value = String(value)\n      element[name] = value\n    } catch (err) {}\n\n    if (typeof value !== 'function') {\n      if (!!value) {\n        // Support SVG 'xlink:href' property:\n        if (name === 'xlink-href') {\n          element.setAttributeNS('http://www.w3.org/1999/xlink', 'href', value)\n        } else {\n          element.setAttribute(name, value)\n        }\n      } else {\n        element.removeAttribute(name)\n      }\n    }\n  }\n}\n\n/**\n * Function to create an HTML or SVG node.\n * @param {node} node node A node to create.\n * @param {svg} svg Whether the node is SVG or not.\n */\nfunction createNode(node, svg) {\n  const element = (svg = svg || node.type === \"svg\")\n  ? document.createElementNS(\"http://www.w3.org/2000/svg\", node.type)\n  : document.createElement(node.type)\n\n  Object.keys(node.props).forEach(key => setProps(element, key, node.props[key]))\n  node.children.map(child => element.appendChild(createElement(child, svg)))\n  return element\n}\n\n/**\n * Function to convert hyperscript/JSX into DOM nodes.\n * @param {jsx|hyperscript} node A node to create.\n * @param {svg} svg Whether the node is SVG or not.\n */\nfunction createElement(node, svg) {\n  return typeof node === \"string\" ? document.createTextNode(node) : createNode(node, svg)\n}\n\n/**\n * Function to get a node's key.\n * @param {node} node \n */\nfunction getKey(node) {\n  if (node && node.props) {\n    return node.props.key\n  }\n}\n\n/**\n * Update an element with new values for properties and/or children.\n * @param {Element} element \n * @param {node} oldProps \n * @param {object} props \n */\nfunction updateElement(element, oldProps, props) {\n  Object.keys(mixin(oldProps, props)).forEach(key => {\n    let value = props[key]\n    let oldValue = key === \"value\" || key === \"checked\" ? element[key] : oldProps[key]\n\n    if (value !== oldValue) setProps(element, key, value, oldValue)\n  })\n}\n\n/**\n * Function to remove element from DOM.\n * @param {node} container The container of the element to remove.\n * @param {node} element The element to remove.\n */\nconst removeElement = (container, element) => container.removeChild(element)\n\n/**\n * Function to patch DOM. Diffs virtual nodes, then patches the DOM.\n * @param {node} container \n * @param {node} element \n * @param {node} oldNode \n * @param {node} node \n * @param {boolean} svg \n * @param {node} nextSibling \n */\nfunction diffAndPatch(container, element, oldNode, node, svg, nextSibling) {\n  if (oldNode == null) {\n    element = container.insertBefore(createElement(node, svg), element)\n  } else if (node.type != null && node.type === oldNode.type) {\n    updateElement(element, oldNode.props, node.props)\n\n    svg = svg || node.type === \"svg\"\n    const len = node.children.length\n    let oldLen = oldNode.children.length\n    let oldKeyed = {}\n    let oldElements = []\n    let keyed = {}\n\n    let k = 0\n    while (k < oldLen) {\n      let oldElement = (oldElements[k] = element.childNodes[k])\n      let oldChild = oldNode.children[k]\n      let oldKey = getKey(oldChild)\n      if (null != oldKey) oldKeyed[oldKey] = [oldElement, oldChild]\n      k++\n    }\n\n    let i = 0, j = 0\n\n    while (j < len) {\n      let oldElement = oldElements[i]\n      let oldChild = oldNode.children[i]\n      let newChild = node.children[j]\n      let oldKey = getKey(oldChild)\n  \n      if (keyed[oldKey]) {\n        i++\n        continue\n      }\n      \n      let newKey = getKey(newChild)\n      let keyedNode = oldKeyed[newKey] || []\n\n      if (null == newKey) {\n        if (null == oldKey) {\n          diffAndPatch(element, oldElement, oldChild, newChild, svg)\n          j++\n        }\n        i++\n      } else {\n        oldKey === newKey ? diffAndPatch(element, keyedNode[0], keyedNode[1], newChild, svg) && i++ :\n        keyedNode[0] ? element.insertBefore(keyedNode[0], oldElement) && diffAndPatch(element, keyedNode[0], keyedNode[1], newChild, svg) : diffAndPatch(element, oldElement, null, newChild, svg)\n        \n        keyed[newKey] = newChild\n\n        j++\n      }\n    }\n\n    while (i < oldLen) {\n      let oldChild = oldNode.children[i]\n      let oldKey = getKey(oldChild)\n      if (null == oldKey) removeElement(element, oldElements[i])\n      i++\n    }\n\n    Object.keys(oldKeyed).forEach(key => {\n      let keyedNode = oldKeyed[key]\n      let reusableNode = keyedNode[1]\n      if (!keyed[reusableNode.props.key]) {\n        removeElement(element, keyedNode[0])\n      }\n    })\n  } else if (element && node !== element.nodeValue) {\n    if (typeof node === \"string\" && typeof oldNode === \"string\") {\n      element.nodeValue = node\n    } else {\n      element = container.insertBefore(\n        createElement(node, svg),\n        (nextSibling = element)\n      )\n      removeElement(container, nextSibling, oldNode.data)\n    }\n  }\n  return element\n}\n","/**\n * A mixin function used for updating component state.\n * @param {object} obj1 An object as the target.\n * @param {object} obj2 An object of properties to target.\n */\nexport const mixin = (obj1, obj2) => {\n  Object.keys(obj2).forEach(p => {\n    if (obj2.hasOwnProperty(p)) {\n      Object.defineProperty(obj1, p, {\n        value: obj2[p],\n        writable: true,\n        enumerable: false,\n        configurable: true\n      })\n    }\n  })\n}\n","import {h} from './h'\nimport {patch} from './patch'\nimport {mixin} from './mixin'\n\nvar rAF = window.requestAnimationFrame\n  || window.webkitRequestAnimationFrame\n  || window.mozRequestAnimationFrame\n  || window.msRequestAnimationFrame\n  || function(cb) { return setTimeout(cb, 16) }\n\n/**\n * @type {object} dataStore A pseudo-private property using Date object to store the component's state.\n */\nconst dataStore = new Date().getTime()\n\n/**\n * @class Class to create a component\n */\nexport class Component {\n  /**\n   * Constructor for Component class.\n   * @typedef {object} props An object of property/values to configure the class instance.\n   * @property {string|element} props.container The container element in which to render the component.\n   * @property {state} [props.state] The state object of the component. This can be of type boolean, string, number, object or array.\n   * @property {function} props.render A function that returns nodes to render to the DOM.\n   */\n  constructor(props) {\n    /** @type {props} */\n    if (!props) props = {}\n    this.selector = props.container || props.root ||  'body'\n    \n    if (props.render) {\n      this.render = props.render\n    }\n    \n    if (props.state) {\n      this.state = props.state\n    }\n\n    this.oldNode = null\n    if (this.selector) {\n      this.container = document.querySelector(this.selector)\n    }\n    this.componentShouldUpdate = true\n    \n    this.mounted = false\n    this.element\n    \n    /**\n     * Handle lifecycle methods.\n     */\n    if (props.beforeCreateComponent) {\n      this.beforeCreateComponent = props.beforeCreateComponent\n    }\n    if (props.componentWasCreated) {\n      this.componentWasCreated = props.componentWasCreated\n    }\n    if (props.componentWillUpdate) {\n      this.componentWillUpdate = props.componentWillUpdate\n    }\n    if (props.componentDidUpdate) {\n      this.componentDidUpdate = props.componentDidUpdate\n    }\n    if (props.componentWillUnmount) {\n      this.componentWillUnmount = props.componentWillUnmount\n    }\n  }\n\n  /**\n   * Define getters and setters for state.\n   */\n  set state(data) {\n    this[dataStore] = data\n    rAF(() => this.update())\n  }\n\n  get state() {\n    return this[dataStore]\n  }\n  \n  /**\n   * Method to set a component's state.\n   * @param {string|number|boolean|object|array} data The data to set.\n   * @param {number} [position] The index of an array whose data you want to set.\n   */\n  setState(data, position) {\n    if (typeof data === 'function') {\n      const state = data.call(this, this.state)\n      if (typeof state !== 'function' && !!state) this.setState(state)\n    }\n    if (Array.isArray(this.state)) {\n      const state = this.state\n      if (position || position === 0) {\n        if (typeof state[position] === 'object') {\n          mixin(state[position], data)\n          this.state = state\n        } else {\n          state[position] = data\n          this.state = state\n        }\n      } else {\n        this.state = state\n      }\n    } else if (typeof this.state === 'object') {\n      const state = this.state\n      mixin(state, data)\n      this.state = state\n    } else {\n      this.state = data\n    }\n  }\n\n  /**\n   * Function to render component after data changes.\n   * If data is passed as argument, it will be used.\n   * Otherwise state will be used.\n   * @param {boolean|number|string|object|array} [data ]\n   * @returns void\n   */\n  update(data) {\n    if (!this.render) return\n\n    // If componentShouldUpdate is set to false, render one time only.\n    // All other updates will be ignored.\n    if (!this.componentShouldUpdate && this.mounted) return\n\n    // If data is 0 or not boolean, use,\n    // else use component state.\n    let __data  = this.state\n    if (data !== true && data) __data = data\n\n    if (this.container && typeof this.container === 'string') {\n      this.selector = this.container\n      this.container = document.querySelector(this.container)\n    }\n\n    // Check if vnode already exists.\n    // Used for deciding whether to fire lifecycle events.\n    const __oldNode = this.oldNode\n    const __render = this.render\n    function testIfVNodesDiffer(data) {\n      try {\n        if (JSON.stringify(this.oldNode) === JSON.stringify(__render(data))) {\n          return false\n        } else {\n          return true\n        }\n      } catch(err) {\n        return true\n      }\n    }\n    // Create virtual dom and check if component id already exists in document.\n    const vdom = this.render(__data)\n    let elem\n    if (vdom && vdom.props && vdom.props.id) {\n      try {\n        elem = this.container.querySelector(`#${vdom.props.id}`)\n      } catch(err) {}\n    }\n\n    // If component element id already exists in DOM, \n    // remove it before rendering the component.\n    if (elem && !this.mounted) {\n      elem.parentNode.removeChild(elem)\n    }\n\n    // Patch DOM with component update.\n    this.element = patch(\n      this.oldNode,\n      (this.oldNode = this.render(__data)),\n      this.element,\n      this.container\n    )\n    if (this.mounted && this.oldNode && testIfVNodesDiffer(__data)) {\n      this.componentWillUpdate && this.componentWillUpdate(this)\n    } else {\n      this.beforeCreateComponent && this.beforeCreateComponent(this)\n      this.componentWasCreated && this.componentWasCreated(this)\n      this.mounted = true\n      return\n    }\n    this.componentDidUpdate && testIfVNodesDiffer(__data) && this.componentDidUpdate(this)\n  }\n  \n  /**\n   * Method to destroy component.\n   * First unbind events.\n   * Then remove component element from DOM.\n   * Also null out component properties.\n   * @returns void\n   */\n  unmount() {\n    const self = this\n    this.componentWillUnmount && this.componentWillUnmount(this)\n    this.container.removeChild(this.element)\n    this.container = undefined\n    for (let key in this) {\n      delete this[key]\n    }\n    delete this.state\n    this.update = undefined\n    this.unmount = undefined\n  }\n}\n\n// Polyfill for Element.closest:\nif (window.Element && !Element.prototype.closest) {\n  Element.prototype.closest = \n  function(s) {\n    let matches = (this.document || this.ownerDocument).querySelectorAll(s)\n    let i\n    let el = this\n    do {\n      i = matches.length\n      while (--i >= 0 && matches.item(i) !== el) {}\n    } while ((i < 0) && (el = el.parentElement))\n    return el\n  }\n}\n","import {patch} from './patch'\nimport {h} from './h'\n\n// Keep tract of rendered nodes.\nconst watchedNodes = {\n  container: undefined,\n  element: undefined,\n  oldNode: undefined\n}\n\n/**\n * A function to create and inject a virtual node into the document. On the first render, the node will be appended to the container. After that, each subsequential render will patch and update the DOM. The first argument can be either a JSX tag or an h function.\n * \n * @param {function} tag A JSX tag or hyperscript function to render.\n * @param {Element|boolean} [container] The element into which the tag will be rendered.\n */\nexport const render = (tag, container) => {\n  if (typeof container === 'string') container = document.querySelector(container)\n  \n  // First time rendering.\n  if (watchedNodes.container !== container) {\n    watchedNodes.container = container\n    watchedNodes.element = undefined\n    watchedNodes.oldNode = undefined\n  }\n  let elem\n  if (tag.props && tag.props.id) {\n    try {\n      if (typeof container === 'string') {\n        elem = document.querySelector(container).querySelector(`#${tag.props.id}`)\n      } else {\n        elem = container.querySelector(`#${tag.props.id}`)\n      }\n    } catch(err) {}\n  }\n  \n  watchedNodes.element = patch(\n    watchedNodes.oldNode,\n    (watchedNodes.oldNode = tag),\n    watchedNodes.element,\n    container\n  )\n}\n","/**\n * Hyperscript function. Enables definition of HTML/SVG using functions.\n * @param {string} type The name of the HTML or SVG tag to create.\n * @param {object} props And object of property/value pairs.\n * @param {string, number, boolean, any[]} children Any child elements.\n */\nexport function h(type, props, ...args) {\n  let stack = [], node\n  const children = []\n  stack = stack.concat(args)\n\n  // Got thru stack from front.\n  while (stack.length) {\n    // If child is array, process.\n    if (Array.isArray((node = stack.shift()))) {\n      node.map(item => stack.push(item))\n    // Else check if child is string or number.\n    } else if (node != null && typeof node !== 'boolean') {\n      typeof node === \"number\" ? node = node + '' : node\n      children.push(node)\n    }\n  }\n  \n  return typeof type === \"string\" \n    ? {type, props: props || {}, children } \n    : type(props || {}, children)\n}\n"],"names":["mixin","obj1","obj2","result","i","patch","oldNode","node","element","container","diffAndPatch","document","body","setProps","name","value","oldValue","style","String","err","setAttributeNS","setAttribute","removeAttribute","createNode","svg","type","createElementNS","createElement","keys","props","forEach","key","children","map","appendChild","child","createTextNode","getKey","updateElement","oldProps","nextSibling","insertBefore","len","length","oldLen","oldKeyed","oldElements","keyed","k","oldElement","childNodes","oldChild","oldKey","j","newChild","newKey","keyedNode","removeElement","reusableNode","nodeValue","data","removeChild","hasOwnProperty","p","defineProperty","rAF","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cb","setTimeout","dataStore","Date","getTime","Component","selector","root","render","state","this","querySelector","componentShouldUpdate","mounted","beforeCreateComponent","componentWasCreated","componentWillUpdate","componentDidUpdate","componentWillUnmount","position","call","setState","Array","isArray","babelHelpers.typeof","testIfVNodesDiffer","JSON","stringify","__render","__data","vdom","elem","id","parentNode","undefined","update","unmount","_this","Element","prototype","closest","s","matches","ownerDocument","querySelectorAll","el","item","parentElement","watchedNodes","stack","args","concat","shift","push","tag"],"mappings":"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"}