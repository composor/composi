{"version":3,"file":"composi.js.map","sources":["../lib/utils/patchElementHelpers/getKey.js","../lib/utils/mixin.js","../lib/utils/patchElementHelpers/setProp.js","../lib/utils/patchElementHelpers/setPropHelpers/handleXlinkHref.js","../lib/utils/patchElementHelpers/setPropHelpers/handleDangerouslySetInnerHTML.js","../lib/utils/patchElementHelpers/setPropHelpers/handleClassName.js","../lib/utils/patchElementHelpers/setPropHelpers/handleStyles.js","../lib/utils/patchElementHelpers/removeElement.js","../lib/utils/patchElementHelpers/removeChildren.js","../lib/utils/patchElementHelpers/createNewElement.js","../lib/utils/patchElementHelpers/createElement.js","../lib/utils/patchElement.js","../lib/utils/patchElementHelpers/updateElement.js","../lib/utils/patchElementHelpers/trackOldElements.js","../lib/utils/patchElementHelpers/removeOldChild.js","../lib/utils/patchElementHelpers/removeOldKeyedElements.js","../lib/patch.js","../lib/utils/rAF.js","../lib/utils/componentHelpers/isObject.js","../lib/utils/componentHelpers/updateComponent.js","../lib/utils/componentHelpers/isSameNode.js","../lib/utils/componentHelpers/eventWhitelist.js","../lib/component.js","../lib/utils/componentHelpers/handleSetState.js","../lib/utils/componentHelpers/unmountComponent.js","../lib/h.js","../lib/mount.js","../lib/utils/fragmentError.js","../lib/render.js","../lib/fragment.js"],"sourcesContent":["/**\n * @typedef {import('../../h').VNode} VNode\n */\n/**\n * Function to get a node's key.\n * @param {VNode} node A virtual node.\n * @return {string | number | null} key.\n */\nexport const getKey = node => (node ? node.key : null)\n","/**\n * A function to merge two objects together. The properties of the second object will overwrite any matching properties in the first object.\n * @param {Object.<string, any>} obj1 The first object to merge.\n * @param {Object.<string, any>} obj2 The second object to merge.\n * @return {Object.<string, any>} Returns a new object of the second object merged with the first.\n */\nexport function mixin(obj1, obj2) {\n  const result = {}\n  for (let i in obj1) {\n    result[i] = obj1[i]\n  }\n  for (let i in obj2) {\n    result[i] = obj2[i]\n  }\n  return result\n}\n","import { handleStyles } from './setPropHelpers/handleStyles'\nimport { handleClassName } from './setPropHelpers/handleClassName'\nimport { handleDangerouslySetInnerHTML } from './setPropHelpers/handleDangerouslySetInnerHTML'\nimport { handleXlinkHref } from './setPropHelpers/handleXlinkHref'\n\n/**\n * Function to set properties and attributes on element.\n * @param {Element} element The element to set props on.\n * @param {string} prop The property/attribute.\n * @param {*} value The value of the prop.\n * @param {string | number | boolean} oldValue The original value of the prop.\n * @param {boolean} isSVG Whether this is SVG or not\n * @return {void} undefined\n */\nexport function setProp(element, prop, value, oldValue, isSVG) {\n  // Do not add these as node attributes:\n  if (\n    prop === 'key' ||\n    prop === 'onComponentDidMount' ||\n    prop === 'onComponentDidUpdate' ||\n    prop === 'onComponentWillUnmount'\n  ) {\n    return\n  } else if (prop === 'style' && typeof value === 'object' && !Array.isArray(value)) {\n    handleStyles(element, prop, value, oldValue)\n  } else {\n    // Convert camel case props to lower case:\n    prop = prop.toLowerCase()\n\n    // Handle cases where 'className' is used:\n    prop = handleClassName(prop)\n\n    // Allow setting innerHTML:\n    handleDangerouslySetInnerHTML(element, prop, value)\n\n    if (prop in element && prop !== 'list' && !isSVG) {\n      element[prop] = value == (null || 'no') ? '' : value\n    } else if (\n      value != null &&\n      value !== 'null' &&\n      value !== 'false' &&\n      value !== 'no' &&\n      value !== 'off'\n    ) {\n      // Support SVG 'xlink:href' property:\n      if (prop === 'xlink-href') {\n        handleXlinkHref(element, prop, value)\n      } else {\n        if (value === 'true') value = ''\n        // Set prop as attribute, except dangerouslySetInnerHTML:\n        if (prop !== 'dangerouslysetinnerhtml') {\n          element.setAttribute(prop, value)\n        }\n      }\n    }\n\n    if (\n      value == null ||\n      value === 'null' ||\n      value === 'undefined' ||\n      value === 'false' ||\n      value === 'no' ||\n      value === 'off'\n    ) {\n      element.removeAttribute(prop)\n    }\n  }\n}\n","/**\n * Enable setting xlink href value for browser that only support SVG 1.0.\n * @param {Element} element\n * @param {string} prop\n * @param {*} value\n * @return {void} undefined\n */\nexport function handleXlinkHref(element, prop, value) {\n  element.setAttributeNS('http://www.w3.org/1999/xlink', 'href', value);\n  element.setAttribute('href', value)\n}\n","/**\n * Enable setting innerHTML as a prop.\n * @param {Element} element\n * @param {string} prop\n * @param {*} value\n * @return {void} undefined\n */\nexport function handleDangerouslySetInnerHTML(element, prop, value) {\n  if (prop === 'dangerouslysetinnerhtml') {\n    element.innerHTML = value\n  }\n}\n","/**\n * Handle converting 'className' to 'class'.\n * @param {string} prop\n * @return {string} string\n */\nexport function handleClassName(prop) {\n  if (prop === 'classname') {\n    prop = 'class'\n  }\n  return prop\n}\n","import { mixin } from '../../mixin'\n\n/**\n * Handle styles defined as object literals.\n * @param {Node} element\n * @param {string} prop\n * @param {any} value\n * @param {any} oldValue\n * @return {void} undefined\n */\nexport function handleStyles(element, prop, value, oldValue) {\n  for (let i in mixin(oldValue, value)) {\n    const style = value == null || value[i] == null ? '' : value[i]\n    if (i[0] === '-') {\n      element[prop].setProperty(i, style)\n    } else {\n      element[prop][i] = style\n    }\n  }\n}\n","import { removeChildren } from './removeChildren'\n\n/**\n * Function to remove element from DOM.\n * @param {Node} parent The containing element in which the component resides.\n * @param {Node} element The parent of the element to remove.\n * @param {Element} node The element to remove.\n * @return {void} undefined\n */\nexport const removeElement = (parent, element, node) => {\n  parent.removeChild(removeChildren(element, node))\n  if (\n    node && \n    node['props'] && \n    node['props'].onComponentDidUnmount\n  ) {\n    node['props'].onComponentDidUnmount.call(\n      node['props'].onComponentDidUnmount,\n      parent\n    )\n  }\n}\n","/**\n * A function to remove the children of a node.\n * @param {Node} element The parent of the node whose children will be removed.\n * @param {Element} node The node whose children will be removed.\n * @return {Node} element The parent of the removed nodes.\n */\nexport function removeChildren(element, node) {\n  const props = node['props']\n  if (props) {\n    for (let i = 0; i < node.children.length; i++) {\n      removeChildren(element.childNodes[i], node.children[i])\n    }\n  }\n  return element\n}\n","import { createElement } from '../patchElementHelpers/createElement'\nimport { removeElement} from '../patchElementHelpers/removeElement'\n\n/**\n * When oldNode does not exist or node.type is different, create a new element.\n * @param {Node} node \n * @param {boolean} isSVG \n * @param {Node} parent \n * @param {Element} element \n * @param {Element} oldNode \n * @return {Node} Node\n */\nexport function createNewElement(node, isSVG, parent, element, oldNode) {\n  const newElement = createElement(node, isSVG)\n  if (parent) {\n    parent.insertBefore(newElement, element)\n    if (oldNode != null) {\n      removeElement(parent, element, oldNode)\n    }\n  }\n  element = /** @type {Element} */(newElement)\n  return element\n}\n","import { setProp } from './setProp'\n\n/**\n * Function to convert hyperscript/JSX into DOM nodes.\n * @param {string | number | Object} node A node to create. This may be a hyperscript function or a JSX tag which gets converted to hyperscript during transpilation.\n * @param {boolean} [isSVG] Whether the node is SVG or not.\n * @return {Node} An element created from a virtual dom object.\n */\nexport function createElement(node, isSVG) {\n  let element\n  if (typeof node === 'number') node = node.toString()\n  if (typeof node === 'string') {\n    element = document.createTextNode(node)\n  } else if ((isSVG = isSVG || node.type === 'svg')) {\n    element = document.createElementNS('http://www.w3.org/2000/svg', node.type)\n  } else {\n    element = document.createElement(node.type)\n  }\n  /**\n   * @property {Object.<string, any>} node.props A virtual node stored on the node.\n   */\n  const props = node.props\n  if (props) {\n    for (let i = 0; i < node.children.length; i++) {\n      element.appendChild(createElement(node.children[i], isSVG))\n    }\n\n    for (let prop in props) {\n      setProp(element, prop, props[prop], null, isSVG)\n    }\n  }\n\n  return element\n}\n","import { getKey } from './patchElementHelpers/getKey'\nimport { updateElement } from './patchElementHelpers/updateElement'\nimport { removeElement } from './patchElementHelpers/removeElement'\nimport { createNewElement } from './patchElementHelpers/createNewElement'\nimport { removeOldChild } from './patchElementHelpers/removeOldChild'\nimport { trackOldElements } from './patchElementHelpers/trackOldElements'\nimport { removeOldKeyedElements } from './patchElementHelpers/removeOldKeyedElements'\n\n/**\n * A function to diff and patch a DOM node with a virtual node.\n * @param {Node} parent The parent node of the elment being patched.\n * @param {Element} element The element being patched.\n * @param {Object} oldNode A virtual dom node from the previous patch.\n * @param {Object} newNode The current virtual dom node.\n * @param {boolean} [isSVG] Whether we are dealing with an SVG element or not.\n * @return {Node} element The patched element.\n */\nexport function patchElement(parent, element, oldNode, newNode, isSVG) {\n  // Short circuit patch if VNodes are identical\n  if (newNode === oldNode) {\n    return\n  } else if (oldNode == null || oldNode.type !== newNode.type) {\n    element = /** @type {Element} */ (createNewElement(\n      newNode,\n      isSVG,\n      parent,\n      element,\n      oldNode\n    ))\n  } else if (oldNode.type == null) {\n    element.nodeValue = newNode\n  } else {\n    updateElement(\n      element,\n      oldNode.props,\n      newNode.props,\n      (isSVG = isSVG || newNode.type === 'svg')\n    )\n\n    const oldKeyed = {}\n    const newKeyed = {}\n    const oldElements = []\n    const oldChildren = oldNode.children\n    const children = newNode.children\n\n    trackOldElements(element, oldElements, oldChildren, oldKeyed)\n\n    let i = 0\n    let j = 0\n\n    while (j < children.length) {\n      let oldKey = getKey(oldChildren[i])\n      let newKey = getKey(children[j])\n\n      if (newKeyed[oldKey]) {\n        i++\n        continue\n      }\n\n      if (newKey != null && newKey === getKey(oldChildren[i + 1])) {\n        if (oldKey == null) {\n          removeElement(element, oldElements[i], oldChildren[i])\n        }\n        i++\n        continue\n      }\n\n      if (newKey == null) {\n        if (oldKey == null) {\n          patchElement(\n            element,\n            oldElements[i],\n            oldChildren[i],\n            children[j],\n            isSVG\n          )\n          j++\n        }\n        i++\n      } else {\n        const keyedNode = oldKeyed[newKey] || []\n\n        if (oldKey === newKey) {\n          patchElement(element, keyedNode[0], keyedNode[1], children[j], isSVG)\n          i++\n        } else if (keyedNode[0]) {\n          patchElement(\n            element,\n            element.insertBefore(keyedNode[0], oldElements[i]),\n            keyedNode[1],\n            children[j],\n            isSVG\n          )\n        } else {\n          patchElement(element, oldElements[i], null, children[j], isSVG)\n        }\n\n        newKeyed[newKey] = children[j]\n        j++\n      }\n    }\n\n    removeOldChild(element, oldChildren, oldElements, i)\n    removeOldKeyedElements(element, oldKeyed, newKeyed)\n  }\n  return element\n}\n","import { mixin } from '../mixin'\nimport { setProp } from '../patchElementHelpers/setProp'\n\n/**\n * @description A function to update an element based on a virtual dom node.\n * @param {Element} element\n * @param {Object.<string, any>} oldProps The original props used to create the element.\n * @param {Object.<string, any>} props New props generated by the virtual dom.\n * @param {boolean} isSVG Whether we are dealing with SVG or not.\n * @function {function(element: Node, oldProps: VNode, props: VNode,isSVG: boolean): void}\n * @return {void} undefined\n */\nexport function updateElement(element, oldProps, props, isSVG) {\n  for (let prop in mixin(oldProps, props)) {\n    if (\n      props[prop] !==\n      (prop === 'value' || prop === 'checked' ? element[prop] : oldProps[prop])\n    ) {\n      setProp(element, prop, props[prop], oldProps[prop], isSVG)\n    }\n  }\n  \n  // Handle lifecycle hook:\n  if (\n    element['mounted'] && \n    props && \n    props.onComponentDidUpdate) {\n    props.onComponentDidUpdate.call(\n      props.onComponentDidUpdate,\n      oldProps,\n      props,\n      element\n    )\n  }\n}\n","import { getKey } from '../patchElementHelpers/getKey'\n/**\n * @typedef {import('../../h').VNode} VNode\n */\n/**\n * Update values for old element and key.\n * @param {Node} element \n * @param {Node[]} oldElements\n * @param {VNode[]} oldChildren\n * @param {Object.<string, any>} oldKeyed \n * @return {void} undefined\n */\nexport function trackOldElements(element, oldElements, oldChildren, oldKeyed) {\n  for (let i = 0; i < oldChildren.length; i++) {\n    oldElements[i] = element.childNodes[i]\n\n    const oldKey = getKey(oldChildren[i])\n    if (oldKey != null) {\n      oldKeyed[oldKey] = [oldElements[i], oldChildren[i]]\n    }\n  }\n}\n","import {removeElement} from '../patchElementHelpers/removeElement'\nimport {getKey} from '../patchElementHelpers/getKey'\n\n/**\n * Function to remove oldChild element when patching.\n * @param {Node} element \n * @param {any[]} oldChildren\n * @param {Node[]} oldElements\n * @param {number} i \n * @return {void} undefined\n */\nexport function removeOldChild(element, oldChildren, oldElements, i) {\n  while (i < oldChildren.length) {\n    if (getKey(oldChildren[i]) == null) {\n      removeElement(element, oldElements[i], oldChildren[i])\n    }\n    i++\n  } \n}\n","import { removeElement } from '../patchElementHelpers/removeElement'\n\n/**\n * Remove old keyed elements.\n * @param {Node} element \n * @param {Object.<string, any>} oldKeyed\n * @param {Object.<string, any>} newKeyed\n * @return {void} undefined\n */\nexport function removeOldKeyedElements(element, oldKeyed, newKeyed) {\n  for (let k in oldKeyed) {\n    if (!newKeyed[k]) {\n      removeElement(element, oldKeyed[k][0], oldKeyed[k][1])\n    }\n  }\n}\n","import { patchElement } from './utils/patchElement'\n/**\n * @typedef {import('./h').VNode} VNode\n */\n\n/**\n * A function to patch a virtual node against a DOM element, updating it in the most efficient manner possible.\n * @param {() => VNode} node A function that returns a virtual node. This may be a JSX tag, which gets converted into a function, or a hyperscript function.\n * @param {Node} [element] The element to patch.\n * @return {Node} The updated element.\n */\nexport function patch(node, element) {\n  if (element) {\n    patchElement(\n      element.parentNode,\n      /** @type{Element} */ (element),\n      element && element['vnode'],\n      node\n    )\n  } else {\n    element = patchElement(null, null, null, node)\n  }\n\n  element['vnode'] = node\n\n  return element\n}\n","/**\n * A cross-browser normalization/polyfill for requestAnimationFrame.\n * @param {Function} cb A callback to execute.\n * @return {number} The request id, that uniquely identifies the entry in the browser's callback list.\n */\nexport const rAF =\n  (window && window.requestAnimationFrame) ||\n  (window && window['msRequestAnimationFrame']) ||\n  function(cb) {\n    return setTimeout(cb, 16)\n  }\n","/**\n * A function to test where something is an object literal or not. Used by Component setState.\n * @param {Object.<string, any>} obj An object literal to test.\n * @return {boolean} boolean\n */\nexport function isObject(obj) {\n  if (Array.isArray(obj)) return false\n  else if (typeof obj === 'object') return true\n  return false\n}\n","import { isSameNode } from './isSameNode'\nimport { patch } from '../../patch'\n/**\n * @typedef {import('../../component').Component} Component\n */\n/**\n * This function updates an already rendered component. In doing so it checks to see if user provided data as an argument to this function. If data was provided, it uses that to render the component. Otherwise it checks if the component has state. If true, the function uses that to render the component. If no data was provided and the component is stateless, nothing will happen.\n * @param {boolean | number | string | Object.<string, any> | any[]} data\n * @param {Component} component \n * @return {void} undefined\n */\nexport function updateComponent(data, component) {\n  if (!component.render) return\n\n  // If componentShouldUpdate is set to false,\n  // render one time only.\n  // All other updates will be ignored.\n  if (!component.componentShouldUpdate && component.mounted) return\n\n  // If data is 0 or non-boolean, use,\n  // else use component state.\n  let __data = component.state\n  if (data !== true && data) __data = data\n\n  if (component.container && typeof component.container === 'string') {\n    component.selector = component.container\n    component.container = document.querySelector(component.container)\n  }\n\n  // Create virtual dom and check if component id\n  // already exists in document.\n  /**\n   * @type {Object.<string, any> | null}\n   */\n  const vdom = component.render(__data)\n  let elem\n  if (vdom && vdom.props && vdom.props.id && component.container) {\n    elem = component.container && component.container.querySelector(`#${vdom.props.id}`)\n  }\n\n  // If component element id already exists in DOM,\n  // remove it before rendering the component.\n  if (elem && !component.mounted) {\n    elem.parentNode.removeChild(elem)\n  }\n\n  // Capture old node to use with isSameNode if component is already mounted:\n  const __oldNode = component.element && component.element.vnode\n\n  // Short circuit update if VNodes are identical:\n  if (isSameNode(__oldNode, __data, component)) return\n\n  /**\n   * @property {HTMLElement} element The base element of the rendered component. You can use component as the base for comopnent instance specific DOM queries or event registration.\n   */\n  component.element = patch(component.render(__data), component.element)\n  if (!component.mounted) {\n    component.componentWillMount && component.componentWillMount()\n    if (!component.container || component.container.nodeType !== 1) {\n      console.error(\n        'The container for a class component is not a valid DOM node. Check the selector provided for the class to make sure it is a valid CSS selector and that the container exists in the DOM. You might be targeting a nonexistent node.'\n      )\n    }\n    component.container.appendChild(component.element)\n    component.mounted = true\n    component.componentDidMount && component.componentDidMount()\n    return\n  }\n\n  component.componentWillUpdate && component.componentWillUpdate()\n  component.componentDidUpdate && component.componentDidUpdate()\n}\n","/**\n * @typedef {import('../../h').VNode} VNode\n */\n/**\n * @typedef {import('../../component').Component} Component\n */\n/**\n * A function to test whether the data provided for updating a component creates a new virtual node or not.\n * @param {VNode} oldNode The previous virtual node of a component.\n * @param {*} data Data to be used when rendering a new virtual node for a component.\n * @param {Component} component A reference to the component being used.\n * @return {boolean} boolean\n */\nexport function isSameNode(oldNode, data, component) {\n  if (\n    component && JSON.stringify(oldNode) === JSON.stringify(component.render(data))\n  ) {\n    return true\n  }\n  return false\n}\n","/**\n * Array of events to remove when a component is unmounted.\n * @type {string[]} eventWhitelist \n */\nexport const eventWhitelist = [\n  'change',\n  'click',\n  'dblclick',\n  'input',\n  'keydown',\n  'keypress',\n  'keyup',\n  'mousedown',\n  'mouseleave',\n  'mouseout',\n  'mouseover',\n  'mouseup',\n  'pointercancel',\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n  'select',\n  'submit',\n  'touchcancel',\n  'touchend',\n  'touchmove',\n  'touchstart'\n]\n","import { rAF } from './utils/rAF'\nimport { handleSetState } from './utils/componentHelpers/handleSetState'\nimport { updateComponent } from './utils/componentHelpers/updateComponent'\nimport { unmountComponent } from './utils/componentHelpers/unmountComponent'\n\n/**\n * This is a numeric value derived from the Date object used as a key to create a pseudo-private property in the Component class for holding state.\n * @type {number} dataStore A numeric value to use as pseudo-private key to store the component's state.\n */\nconst dataStore = new Date().getTime()\n\n/**\n * Component can be instantiated with the new keyword, or extended to create a custom version of the class.\n * @class Class to create a component.\n * @example New instance of Component class:\n * const title = new Component({\n *   container: 'header',\n *   state: 'World',\n *   render: message => <h1>Hello, {message}!</h1>\n * })\n * @example Extending Component class:\n * class UserList extends Component {\n *   constructor(props) {\n *     super(props)\n *     this.state = users\n *     this.container = 'section'\n *   }\n *   render(users) {\n *     return (\n *      <ul class='user-list'>\n *        {\n *          users.map(user => <li>{user.name}</li>)\n *        }\n *      </ul>\n *     )\n *   }\n * }\n */\nexport class Component {\n  /**\n   * Constructor for Component class.\n   * @property {state} [props.state] The state object of the component. This can be of type boolean, string, number, object or array.\n   * @property {string} selector A CSS selector describing the DOM container in which to render the component.\n   * @property {HTMLElement} container The DOM node in which the component is rendered.\n   * @property {boolean} componentShouldUpdate A flag to determine whether a component can render or not. Setting this to false allows you to maipulate a component's state without triggering and automatic render. After setting to true, you may need to execute `update()` on a component instance to force render it.\n   * @property {boolean} mounted A boolean flag that tracks whether a component has been mounted in the DOM or not. This is used internally by Composi, do not touch!\n   * @property {Node} element The root or base element of a component's DOM tree. You can use it to register events or as the basis of a component-specific DOM query.\n   * @method componentWillMount A callback that is called before a component is mounted in the DOM.\n   * @method componentDidMount A callback that is called after a component is mounted in the DOM. Use this to register events, query the component DOM, etc.\n   * @method componentWillUpdate A callback that is called before a component is updated. This is not called the first time a component is rendered.\n   * @method componentDidUpdate A callback that is called after a component is updated. This is not called the first time a component is rendered.\n   * @method componentWillUnmount A callback that is called before a component is unmounted from the DOM. Use this for any environmental cleanup.\n   * @method render A method that returns nodes to render to the DOM.¸\n   * @method update A method that renders the component template with provided data to the DOM. Data may be provided directly as the primary argument, or it can be derived from the component's state. Data provided as an argument will override use of component state.\n   * @method unmount A method to unmount a component from the DOM. This deletes the DOM tree structure starting from the component's base element, and sets the component instance properties to null.\n   * @constructs Component\n   */\n  constructor(props) {\n    if (!props) props = {}\n    /**\n     * @property {Object} props An object literal of options passed to the class constructor during initialization.\n     */\n    this.props = props\n    /**\n     * @property {string | HTMLElement} container The HTML element in which the component gets rendered. This can be a CSS selector describing the container or a DOM node reference.\n     */\n    this.selector = props.container || 'body'\n\n    if (props.render) {\n      /**\n       * @property {Function} render A method to convert markup into DOM nodes to inject in the document. The method itself gets provided at init time by a function provided by the user as an argument, or in the case of extending, a method defined directly on the class extension.\n       */\n      this.render = props.render\n    }\n\n    if (props.state) {\n      /**\n       * @property {boolean | number | string | Object | any[]}\n       */\n      this.state = props.state\n    }\n\n    if (this.selector) {\n      /**\n       * @property {HTMLElement} container The HTML element in which the component gets rendered.\n       */\n      this.container = document.querySelector(this.selector)\n    }\n\n    /**\n     * @property {boolean} componentShouldUpdate Determines whether a component should update. Set `componentShouldUpdate` to `false`, make changes, then set  `componentShouldUpdate` to `true` and update component with `update` method.\n     */\n    this.componentShouldUpdate = true\n\n    /**\n     * @property {boolean} mounted Indicates whether a component is mounted in the DOM or not. This is used internally, so do not change!\n     */\n    this.mounted = false\n\n    /**\n     * @property {HTMLElement} this.element\n     * @property {Object} this.element.vnode\n     */\n    this.element = null\n\n    if (props.componentWillMount)\n      /**\n       * @property {() => void} componentWillMount A method to execute before the component mounts. The callback gets a reference to the component instance as its argument.\n       * @return {void} undefined\n       */\n      this.componentWillMount = props.componentWillMount\n\n    if (props.componentDidMount)\n      /**\n       * @property {() => void} componentDidMount  A method to execute after the component mounts. The callback gets a reference to the component instance as its argument.\n       * @return {void} undefined\n       */\n      this.componentDidMount = props.componentDidMount\n\n    if (props.componentWillUpdate)\n      /**\n       * @property {() => void} componentWillUpdate A method to execute before the component updates. The callback gets a reference to the component instance as its argument.\n       * @return {void} undefined\n       */\n      this.componentWillUpdate = props.componentWillUpdate\n\n    if (props.componentDidUpdate)\n      /**\n       * @property {() => void} componentDidUpdate -A method to execute after the component updates. The callback gets a reference to the component instance as its argument.\n       * @return {void} undefined\n       */\n      this.componentDidUpdate = props.componentDidUpdate\n\n    if (props.componentWillUnmount)\n      /**\n       * @property {() => void} componentWillUnmount A method to execute before the component unmounts. The callback gets a reference to the component instance as its argument.\n       * @return {void} undefined\n       */\n      this.componentWillUnmount = props.componentWillUnmount\n  }\n\n  /**\n   * @method A method to execute before the component mounts.\n   * @param {() => void} [cb] A callback to execute.\n   * @return {void} undefined\n   */\n  componentWillMount(cb) {\n    if (cb && typeof cb === 'function') {\n      cb.call(cb, this)\n    }\n  }\n\n  /**\n   * @method A method to execute after the component mounts.\n   * @param {() => void} [cb] A callback to execute.\n   * @return {void} undefined\n   */\n  componentDidMount(cb) {\n    if (cb && typeof cb === 'function') {\n      cb.call(cb, this)\n    }\n  }\n\n  /**\n   * @method A method to execute before the component updates.\n   * @param {() => void} [cb] A callback to execute.\n   * @return {void} undefined\n   */\n  componentWillUpdate(cb) {\n    if (cb && typeof cb === 'function') {\n      cb.call(cb, this)\n    }\n  }\n\n  /**\n   * @method A method to execute after the component updates.\n   * @param {() => void} [cb] A callback to execute.\n   * @return {void} undefined\n   */\n  componentDidUpdate(cb) {\n    if (cb && typeof cb === 'function') {\n      cb.call(cb, this)\n    }\n  }\n\n  /**\n   * @method A method to execute after the component updates.\n   * @param {() => void} [cb] A callback to execute.\n   * @return {void} undefined\n   */\n  componentWillUnmount(cb) {\n    if (cb && typeof cb === 'function') {\n      cb.call(cb, this)\n    }\n  }\n\n  /**\n   * @method A method to create a virtual node from data and markup. The returned virtual node will get converted into a node that gets injected in the DOM.\n   * @param {*} data\n   */\n  render(data) {\n    return data\n  }\n  /** End of type stubs */\n\n  /**\n   * @method This is getter to access the component's state using the pseudo-private key dataStore.\n   * @return {boolean | number | string | Object | any[]} The component's state\n   */\n  get state() {\n    return this[dataStore]\n  }\n\n  /**\n   * @method This is a setter to define the component's state. It uses the dataStore object as a pseudo-private key. It uses requestAnimationFrame to throttle component updates to avoid layout thrashing.\n   * @param {string | number | boolean | Object | any[]} data Data to set as component state.\n   * @return {void} undefined\n   */\n  set state(data) {\n    this[dataStore] = data\n    rAF(() => this.update())\n  }\n\n  /**\n   * @method Method to set a component's state. This accepts simple types or Objects. If updating an array, you can pass in the data and the position (number) in the array to update. Optionally you can pass a callback, which receives the state as its argument. You need to return the state changes in order to update the component's state.\n   * @example\n   * this.setState(true)\n   * this.setState(0)\n   * this.setState({name: 'Joe'})\n   * this.setState([1,2,3])\n   * this.setState(prevState => prevState + 1)\n   * @param {string | number | boolean | Object | any[] | Function} data The data to set. If a callback is passed as the argument to execute, it gets passed the previous state as its argument. You need to make sure the callback returns the final state or the component will not update.\n   * @return {void} undefined\n   */\n  setState(data) {\n    handleSetState(data, this)\n  }\n\n  /**\n   * @method Function to render component after data changes.\n   * If data is passed as argument, it will be used.\n   * Otherwise state will be used.\n   * @param {boolean | number | string | Object | any[]} [data] By default, data will be the component's current state, otherwise, if data is provided as an argument, that will be used, overriding the state.\n   * @return {void} undefined\n   */\n  update(data) {\n    updateComponent(data, this)\n  }\n\n  /**\n   * @method Method to destroy a component.\n   * First unbind events.\n   * Then remove component element from DOM.\n   * Also null out component properties.\n   * @return {void} undefined\n   */\n  unmount() {\n    unmountComponent(this)\n  }\n}\n","import { mixin } from '../mixin'\nimport { isObject } from '../componentHelpers/isObject'\n\n/**\n * @typedef {import('../../component').Component} Component\n */\n/**\n * A helper function for the Component class. This sets state on the class component provided.\n * @param {*} data Data to use as state.\n * @param {Component} component A reference to the component to use.\n * @return {void} undefined\n */\nexport function handleSetState(data, component) {\n  if (typeof data === 'function') {\n    const state = data.call(component, component.state)\n    if (state) component.state = state\n  } else if (isObject(component.state) && isObject(data)) {\n    const state = component.state\n    component.state = mixin(state, data)\n  } else {\n    component.state = data\n  }\n}","import { eventWhitelist } from './eventWhitelist'\n\n/**\n * @typedef {import('../../component').Component} Component\n */\n/**\n * This function will unmount the provided component. Doing so it unregisters a whitelist of events, deletes the base element of the component from the DOM, and sets the component instance properties to null.\n * @param {Component} component \n * @return {void} undefined\n */\nexport function unmountComponent(component) {\n  if (!component.element) return\n  component.componentWillUnmount && component.componentWillUnmount()\n  eventWhitelist.map(event => {\n    component.element.removeEventListener(event, component)\n  })\n  component.container.removeChild(component.element)\n  component.container = null\n  for (let key in component) {\n    delete component[key]\n  }\n  delete component.state\n  component.update = null\n  component.unmount = null\n}\n","/**\n * @typedef {Object.<string, any>} Props\n */\n/**\n * @typedef {Object} VNode;\n * @property {string | Function} VNode.type;\n * @property {Props}  VNode.props;\n * @property {any[]} VNode.children;\n * @property {string | number | null} VNode.key;\n */\n/**\n * Hyperscript function. Enables definition of HTML/SVG using functions.\n * @param {string | Function} type A tag name or function.\n * @param {Object} [props] An Object literal of key-value pairs.\n * @param {any[]} children An array of strings or other arrays.\n * @return {VNode} VNode An object literal of type, props and children.\n *\n * @example Virtual node with string as content:\n * const title = h('h1', {class: 'main-title'}, 'This is the Titel!')\n * @example Virtual node with children:\n * const list = h(\n *   'ul',\n *   {class: 'list'},\n *   [\n *     h('li', {}, 'One'),\n *     h('li', {}, 'Two'),\n *     h('li', {}, 'Three')\n *   ]\n * )\n */\nexport function h(type, props, ...children) {\n  const nodes = []\n  const childNodes = []\n  let length = children.length\n  props = props || {}\n  let key = props.key || null\n\n  // Remove key from props if present:\n  delete props.key\n\n  while (length-- > 0) nodes.push(children[length])\n\n  while (nodes.length) {\n    const node = nodes.pop()\n    if (node && node.pop) {\n      for (length = node.length; length--; ) {\n        nodes.push(node[length])\n      }\n    } else if (node != null && node !== true && node !== false) {\n      childNodes.push(node)\n    }\n  }\n\n  children = childNodes\n\n  if (typeof type === 'function') {\n    return type(props || {}, childNodes)\n  } else {\n    return {\n      type,\n      props,\n      children,\n      key\n    }\n  }\n}\n","import { patch } from './patch'\nimport { FragmentError } from './utils/fragmentError'\n\n/**\n * A function to create and inject a virtual node into the document. The node will be appended to the container. The first argument can be either a JSX tag or an h function. After mounting, use the render function and the element returned by mount to udate the DOM.\n * @example Insert Title tag into section:\n * const title = mount(<Title message='Hello World!'/>, 'section').\n * // Update the node with new prop value and reference to DOM from mount:\n * render(<Title message='New stuff'/>, title)\n * @param {Object | Function} tag A JSX tag or hyperscript function to render.\n * @param {Node | string} [container] The element into which the tag will be rendered.\n * @param {HTMLElement} [elementToHydrate] A server-rendered element to hydrate during initial load.\n * @return {Node} The base element of the rendered tag.\n */\nexport const mount = (tag, container, elementToHydrate) => {\n  container = typeof container === 'string' && document.querySelector(container)\n  if (!container) container = document.body\n  if (Array.isArray(tag)) throw new FragmentError()\n  const element = patch(tag)\n  if (tag.props && tag.props.onComponentDidMount) {\n    tag.props.onComponentDidMount.call(tag.props.onComponentDidMount, element)\n  }\n\n  element['mounted'] = true\n  if (elementToHydrate) {\n    if (typeof elementToHydrate === 'string') {\n      elementToHydrate = document.querySelector(elementToHydrate)\n    }\n    if (elementToHydrate.nextElementSibling) {\n      elementToHydrate.parentNode.insertBefore(\n        element,\n        elementToHydrate.nextElementSibling\n      )\n      elementToHydrate.parentNode.removeChild(elementToHydrate)\n      return element\n    } else {\n      elementToHydrate.parentNode.appendChild(element)\n      elementToHydrate.parentNode.removeChild(elementToHydrate)\n      return element\n    }\n  } else {\n    return container.appendChild(element)\n  }\n}\n","/**\n * Class to throw error message when attempting to insert Fragement tag directly into DOM.\n * @return {string} message\n */\nexport class FragmentError {\n  constructor() {\n    this.message = 'Cannot insert Fragment tag directly into DOM.'\n    this.toString = function() {\n      return this.message\n    }\n  }\n}\n","import { patch } from './patch'\n\n/**\n * A function to update a functional component already mounted in the DOM. The first argument can be either a JSX tag or an h function.\n * @example Update Title tag into section:\n * const element = mount(<Title message='Hello World!'/>, 'section')\n * // Pass the captured element to the render function:\n * render(<Title message='Hello Everyone!'/>, 'header')\n * @param {() => import('./h').VNode} tag A JSX tag or hyperscript function to render.\n * @param {Node} [element] The element in the DOM which will be updated.\n * @return {Node} The base element of the rendered tag.\n */\nexport function render(tag, element) {\n  return patch(tag, element)\n}\n","/**\n * @typedef {import('./h').VNode} VNode\n */\n/**\n * A tag to enable returning sibling elements. This is useful for returning list items to render in a list or table cells to render in a table row.\n * @example\n * <Fragment>\n *   <li>A</li>\n *   <li>B</li>\n *   <li>C</li>\n * </Fragment>\n * Or functionally:\n * Fragment(null, [\n *   h('li', {}, 'A'),\n *   h('li', {}, 'B'),\n *   h('li', {}, 'C')\n * ])\n * @param {Object} [props] When using Fragment as a function, props is the first argument. Provide either null or {} as the value for props.\n * @param {VNode[]} [children] The siblings to return with the Fragment. This will be an array of sibling elements.\n * @return {VNode[]} An array of virtual nodes.\n */\nexport const Fragment = (props, children) => children\n"],"names":["getKey","node","key","mixin","obj1","obj2","result","i","setProp","element","prop","value","oldValue","isSVG","Array","isArray","toLowerCase","innerHTML","setAttributeNS","setAttribute","removeAttribute","style","setProperty","removeElement","parent","removeChild","removeChildren","children","length","childNodes","onComponentDidUnmount","call","createNewElement","oldNode","newElement","createElement","toString","document","createTextNode","type","createElementNS","props","appendChild","insertBefore","patchElement","newNode","nodeValue","oldProps","onComponentDidUpdate","oldKeyed","newKeyed","oldElements","oldChildren","oldKey","j","newKey","keyedNode","k","patch","parentNode","rAF","window","requestAnimationFrame","cb","setTimeout","isObject","obj","updateComponent","data","component","render","componentShouldUpdate","mounted","__data","state","container","selector","querySelector","vdom","elem","id","__oldNode","vnode","JSON","stringify","componentWillMount","nodeType","error","componentDidMount","componentWillUpdate","componentDidUpdate","eventWhitelist","dataStore","Date","getTime","Component","this","componentWillUnmount","map","removeEventListener","event","update","unmount","_this","nodes","push","pop","tag","elementToHydrate","body","message","onComponentDidMount","nextElementSibling"],"mappings":"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"}